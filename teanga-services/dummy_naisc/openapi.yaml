openapi: 3.0.0
info:
  version: "1.0"
  title: Naisc Linking Services
paths:
  /naisc/upload/{id}:
    put:
      summary: Upload a dataset to Naisc
      operationId: upload
      requestBody:
        content:
          application/rdf+xml:
            schema:
              type: string
          text/turtle:
            schema:
              type: string
          application/n-triples:
            schema:
              type: string
      parameters:
        - name: id
          in: path
          description: The identifier of the dataset
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Dataset uploaded successfully
  /naisc/{config}/block:
    get:
      summary: Find a blocking between two datasets
      operationId: block
      parameters:
        - name: left
          in: query
          description: The ID of the left dataset to block as uploaded to upload
          required: true
          schema:
            type: string
        - name: right
          in: query
          description: The ID of the right dataset to block as uploaded to upload
          required: true
          schema:
            type: string
        - name: config
          in: path
          description: The configuration to be used for matching
          required: true
          schema:
            type: string
      responses:
        '200':
          description: The blocking succeeded
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Blocking"
  /naisc/{config}/extract_text:
    post:
      summary: Extract text with a lens
      operationId: extract_text
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Blocking'
      parameters: 
        - name: config
          in: path
          description: The configuration to be used for matching
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/LangStringPair"
  /naisc/{config}/text_features:
    post:
      summary: Extract features from text
      operationId: text_features
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LangStringPair'
      parameters: 
        - name: config
          in: path
          description: The configuration to use
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Feature'
  /naisc/{config}/graph_features:
    post:
      summary: Extract features from the graph
      operationId: graph_features
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Blocking'
      parameters: 
        - name: config
          in: path
          description: The configuration to use
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Feature'
  /naisc/{config}/score:
    post:
      summary: Produce a score from a set of features
      operationId: score
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/Feature'
      parameters:
        - name: config
          in: path
          description: The configuration to use
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Score'
  /naisc/{config}/match:
    post:
      summary: Produce a matching from some alignments
      operationId: match
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/Alignment'
      parameters:
        - name: config
          in: path
          description: The configuration to use
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Alignment'
  /naisc/{config}/prematch:
    post:
      summary: Check if a matching is trivial and can be computed without artificial intelligence
      operationId: prematch
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Blocking'
      parameters:
        - name: config
          in: path
          description: The configuration to use
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                type: boolean
components:
  schemas:
    Blocking:
      type: object
      required:
        - entity1
        - entity2
      properties:
        entity1:
          $ref: "#/components/schemas/Resource"
        entity2:
          $ref: "#/components/schemas/Resource"
      example:
        entity1:
          uri: "http://dbpedia.org/resource/Example"
          dataset: "dbpedia"
        entity2:
          uri: "http://en-word.net/lemma/example"
          dataset: "english-wordnet"
    Resource:
      type: object
      required: 
        - uri
        - dataset
      properties:
        uri:
          type: string
          description: The URI of the resource
          example: "http://www.example.com/foo"
        dataset:
          type: string
          description: The Dataset ID this resource occurs in
          example: "dataset"
    LangStringPair:
      type: object
      required:
        - string1
        - string2
        - lang1
        - lang2
        - tag
      properties:
        string1:
          type: string
          description: The first string
        string2:
          type: string
          description: The second string
        lang1:
          type: string
          format: lang
          description: The language of the first string
        lang2:
          type: string
          format: lang
          description: The language of the second string
        tag:
          type: string
          description: The tag decides how the feature will be extracted based on the configuration, normally this is just `default`
      example:
        string1: example
        lang1: en
        string2: Beispiel
        lang2: de
        tag: default
    Feature:
      type: object
      required:
        - name
        - value
      properties:
        name:
          type: string
          description: A name that identifies this feature. Unique in the feature list
        value:
          type: number
          format: double
          description: The value of this feature
      example:
        name: jaccard
        value: 0.6
    Score:
      type: object
      required:
        - property
        - probability
      properties:
        property:
          type: string
          format: url
          description: The URI of the property that is being predicted. Most frequently this is `skos:exactMatch`
        probability:
          type: number
          format: double
          minimum: 0
          maximum: 1
          description: The probability that this property holds
      example:
        property: "http://www.w3.org/2004/02/skos/core#exactMatch"
        probability: 0.8
    Alignment:
      type: object
      required: 
        - entity1
        - entity2
        - probability
        - property
      properties:
        entity1:
          $ref: '#/components/schemas/Resource'
        entity2:
          $ref: '#/components/schemas/Resource'
        probability:
          type: number
          format: double
          minimum: 0
          maximum: 1
          description: The probability that the property holds
        property:
          type: string
          format: url
          description: The property that is predicted
      example:
        entity1:
          uri: "http://dbpedia.org/resource/Example"
          dataset: "dbpedia"
        entity2:
          uri: "http://en-word.net/lemma/example"
          dataset: "english-wordnet"
        property: "http://www.w3.org/2004/02/skos/core#exactMatch"
        probability: 0.8
# Added by API Auto Mocking Plugin
servers:
  - description: SwaggerHub API Auto Mocking
    url: https://virtserver.swaggerhub.com/jmccrae/Naisc/1.0
