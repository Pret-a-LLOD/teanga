{"version":3,"sources":["components/ServiceNode.js","components/ServiceEdge.js","components/ServiceCard.js","components/SearchBar.js","components/ServiceForm.js","components/EdgeForm.js","components/TeangaNav.js","App.js","index.js"],"names":["ServiceNode","data","className","selected","type","position","label","style","borderRadius","CustomEdge","id","sourceX","sourceY","targetX","targetY","sourcePosition","targetPosition","strokeWidth","stroke","arrowHeadType","markerEndId","edgePath","getBezierPath","markerEnd","getMarkerEnd","d","href","fontSize","startOffset","textAnchor","ServiceCard","name","key","dispatch","Card","border","marginLeft","marginRight","width","Body","Title","maxWidth","Button","variant","size","onClick","ACTIONS","ADD_NODE","SearchBar","services","input","useState","setSelected","MenuItem","text","Arrow","ArrowLeft","ArrowRight","menu","list","filter","service","includes","map","el","Menu","Container","InputGroup","Prepend","Text","FormControl","aria-label","aria-describedby","value","onChange","e","UPDATE_INPUT","target","arrowLeft","arrowRight","onSelect","ServiceForm","node","paths","selectedPath","methods","parameters","requestBody","rqBody_options","Object","keys","content","method_name","top","left","height","zIndex","background","overflowY","marginTop","UNSELECT_NODE","Form","Group","controlId","Label","Control","as","defaultValue","workflow","event","SELECT_FORM_VALUE","path_name","selectedMethod","rows","JSON","parse","parameter_obj","placeholder","marginBottom","EdgeForm","edge","operators","UPDATE_EDGE_TYPE","UNSELECT_EDGE","TeangaNav","Navbar","bg","fixed","expand","Brand","class","src","nodeTypes","teangaNode","edgeTypes","teangaEdge","ServiceEdge","initialState","node_count","selected_nodeId","selected_edgeId","elements","SET_OPENAPI","CREATE_WORKFLOW","ADD_EDGE","SELECT_NODE","SELECT_EDGE","REMOVE_SELECTED_NODE","reducer","state","action","i","openapi","payload","openapi_yamls","console","log","groupBy_node","element","hasOwnProperty","candidate","idx","dependecyEdge","source","axios","post","then","response","window","resp","catch","alert","selectedService","operation_id","new_node","toString","repo","image_id","image_tag","host_port","container_port","dependencies","x","y","concat","addEdge","params","field","indexOf","App","useReducer","useEffect","a","promises","fetch","url","openapi_obj","parseYAML","Promise","all","padding","onConnect","onElementClick","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.d45069f4.chunk.js","sourcesContent":["import React from 'react';\nimport { Handle } from 'react-flow-renderer';\n\nconst ServiceNode = ({ data }) => {\n  return (\n    <div className={data.selected ? \"flowchart-operator-new selected-node\" : \"flowchart-operator-new\"}\n         >\n      <Handle className=\"handle-left\" type=\"target\" position=\"left\" />\n      <div className=\"handle-title\">{data.label}</div>\n      <Handle\n        className=\"handle-right\"\n        type=\"source\"\n        position=\"right\"\n        style={{ borderRadius: 0 }}\n      />\n    </div>\n  );\n};\n\nexport default ServiceNode;\n","import React, { FC } from 'react';\nimport { EdgeProps, getBezierPath, getMarkerEnd } from 'react-flow-renderer';\n\nconst CustomEdge: FC<EdgeProps> = ({\n  id,\n  sourceX,\n  sourceY,\n  targetX,\n  targetY,\n  sourcePosition,\n  targetPosition,\n  style = {\n      strokeWidth: 10,\n      stroke: \"rgb(92, 184, 92)\" \n  },\n  data,\n  arrowHeadType,\n  markerEndId,\n}) => {\n  const edgePath = getBezierPath({ sourceX, sourceY, sourcePosition, targetX, targetY, targetPosition });\n  const markerEnd = getMarkerEnd(arrowHeadType, markerEndId);\n\n  return (\n    <>\n      <path id={id} style={style} className=\"react-flow__edge-path\" d={edgePath} markerEnd={markerEnd} />\n      <text>\n        <textPath href={`#${id}`} style={{ fontSize: '12px' }} startOffset=\"50%\" textAnchor=\"middle\">\n          {data.type}\n        </textPath>\n      </text>\n    </>\n  );\n};\n\nexport default CustomEdge;\n","import React from 'react';\nimport { Card , Button } from 'react-bootstrap'\nimport '../../node_modules/bootstrap/dist/css/bootstrap.min.css';\nimport { ACTIONS } from '../App'\n\nfunction ServiceCard({ name, key, selected, dispatch }) {\n    return (\n        <Card border={selected ? \"danger\" : \"primary\"} \n              style={{ \n            marginLeft: \"0.5vw\",\n            marginRight: \"0.5vw\",\n            width: '15vw', \n            borderRadius: '10px'\n        }} >\n          <Card.Body>\n            <Card.Title\n                    style={{\n                        maxWidth: \"90%\",\n                        fontSize: \"10px\"\n                    }}>{name}</Card.Title>\n            <Button variant=\"primary\"\n                    size=\"sm\"\n                    style={{\n                        maxWidth: \"90%\",\n                        fontSize: \"10px\"\n                    }} \n                    onClick={()=> {\n                        dispatch({\n                            \"type\": ACTIONS.ADD_NODE,\n                            \"payload\": {\n                                \"name\": name\n                            }\n                        })\n                    }}\n        >Add to Workflow</Button>\n          </Card.Body>\n        </Card>\n    )\n}\n\nexport default ServiceCard\n\n\n","import React, { useState } from 'react'\nimport ServiceCard from './ServiceCard' \nimport ScrollMenu from 'react-horizontal-scrolling-menu';\nimport { InputGroup, FormControl } from 'react-bootstrap'; \nimport { Container } from 'react-bootstrap'\nimport './SearchBar.css'\nimport { ACTIONS } from '../App'\n\n\nfunction SearchBar ({ services, input, dispatch }){\n        const [selected, setSelected] = useState(services[0][\"name\"])\n        // list of items\n        const MenuItem = ({text, selected}) => {\n          return <ServiceCard\n            key={text}\n            name={text}\n            className=\"menu-item\"\n            selected={selected}\n            dispatch={dispatch}\n            ></ServiceCard>;\n        };\n        // All items component\n        // Important! add unique key\n        const Menu = (list, selected) =>\n          list.filter( (service) => service[\"name\"].includes(input)).map(el => {\n            const {name} = el;\n\n            return <MenuItem /*onClick={() => handleClick(name) }*/ text={name} key={name} selected={selected} />;\n        });\n        const Arrow = ({ text, className }) => {\n              return (\n                <div style={{\n                    border: \"2px solid black\"\n                }}\n                  className={className}\n                >{text}</div>\n              );\n            };\n        const ArrowLeft = Arrow({ text: '<', className: 'arrow-prev' });\n        const ArrowRight = Arrow({ text: '>', className: 'arrow-next' });\n        function onSelect(key){\n                setSelected(key);\n        }\n        const menu =  Menu(services, selected); \n\n        return (\n            <Container>\n            <InputGroup size=\"sm\" className=\"mb-3\">\n                <InputGroup.Prepend>\n                  <InputGroup.Text id=\"inputGroup-sizing-sm\">Search : </InputGroup.Text>\n                </InputGroup.Prepend>\n                <FormControl \n                    className=\"searchbar-input\"\n                    aria-label=\"Small\" \n                    aria-describedby=\"inputGroup-sizing-sm\" \n                    type=\"text\" \n                    value={input} \n                    onChange={(e) => \n                        dispatch({\n                            \"type\": ACTIONS.UPDATE_INPUT,\n                            \"payload\": {\n                                \"input\": e.target.value \n                            }\n                        })\n                    }\n            />\n          </InputGroup>\n            <ScrollMenu\n              style={{\n                  width: \"100%\"\n              }}\n              data={menu}\n              arrowLeft={ArrowLeft}\n              arrowRight={ArrowRight}\n              selected={selected}\n              onSelect={onSelect}\n            />\n            </Container>\n        )\n}\nexport default SearchBar;\n","import { useState } from 'react';\nimport { Form, Button } from 'react-bootstrap';\nimport { AiFillCloseCircle } from \"react-icons/ai\";\nimport { ACTIONS } from '../App'\n\nfunction ServiceForm({ node, \n                       selectedPath,\n                       paths,\n                       methods, \n                       parameters,\n                       requestBody,\n                       dispatch }){\n    if(requestBody){\n        var rqBody_options= Object.keys(requestBody.content).map((method_name) => <option>{method_name}</option>)\n    }\n    else{\n        var rqBody_options= []\n    }\n    /*\n    const paths = Object.keys(node.data.openapi.paths)\n                        .map((path_name) => path_name)\n    const [selectedPath, setSelectedPath] = useState(paths[0]);\n    console.log(\"------------------SP-------------->\");\n    console.log(selectedPath)\n\n    const methods = Object.keys(node.data.openapi.paths[selectedPath])\n    const [selectedMethod, setSelectedMethod] = useState(methods[0]);\n    const parameters = node.data.openapi.paths[selectedPath][selectedMethod][\"parameters\"];\n    */\n\n    return (<div\n            style={{\n                position: \"fixed\",\n                top: \"50px\",\n                left: \"0\",\n                height: \"100%\",\n                width: \"30%\",\n                zIndex: 999, \n                border: \"2px solid black\",\n                background: \"white\",\n                overflowY: \"auto\"\n            }}\n        >\n        <h3> { node.data.label } </h3>\n        <Button \n            variant=\"primary\" \n            type=\"submit\"\n            style={{\n                marginTop: \"-70px\",\n                marginLeft: \"100%\"\n            }}\n            onClick={ () => dispatch({\n                \"type\": ACTIONS.UNSELECT_NODE,\n                \"payload\":{\n                    \"id\": node.id\n                }\n            })\n           }\n        ><AiFillCloseCircle/></Button>\n        <Form>\n            <Form.Group className=\"service-leftbar-group\" \n                        controlId=\"exampleForm.ControlSelect1\">\n                <Form.Label>Select an Endpoint</Form.Label>\n            <Form.Control as=\"select\"\n                defaultValue={node.workflow.selectedPath}\n                onChange={(event)=> dispatch({\n                                        \"type\": ACTIONS.SELECT_FORM_VALUE,\n                                        \"payload\": {\n                                            \"field\":\"selectedPath\",\n                                            \"value\":event.target.value\n                                        }\n                                        })\n                         }\n                >\n                {paths.map((path_name) => <option>{path_name}</option>)}\n            </Form.Control>\n          </Form.Group>\n            <Form.Group className=\"service-leftbar-group\" \n                        controlId=\"exampleForm.ControlSelect2\">\n                <Form.Label>Select an Request method</Form.Label>\n            <Form.Control as=\"select\"\n                defaultValue={node.workflow.selectedMethod}\n                onChange={(event)=> dispatch({\n                                        \"type\": ACTIONS.SELECT_FORM_VALUE,\n                                        \"payload\": {\n                                            \"field\":\"requestBody\",\n                                            \"value\":event.target.value\n                                        }\n                                        })\n                         }\n             >\n            {methods.map((method_name) => <option>{method_name}</option>)}\n            </Form.Control>\n          </Form.Group>\n          { requestBody ? \n            <Form.Group className=\"service-leftbar-group\" \n                        controlId=\"exampleForm.ControlSelect2\">\n                <Form.Label>Select a Request Body </Form.Label>\n            <Form.Control as=\"select\"\n                onChange={(event)=> dispatch({\n                                        \"type\": ACTIONS.SELECT_FORM_VALUE,\n                                        \"payload\": {\n                                            \"field\":\"selectedMethod\",\n                                            \"value\":event.target.value\n                                        }\n                                        })\n                         }\n\n             >\n            {rqBody_options}\n            </Form.Control>\n            <Form.Control as=\"textarea\" rows={3}\n                onChange={(event)=> dispatch({\n                                        \"type\": ACTIONS.SELECT_FORM_VALUE,\n                                        \"payload\": {\n                                            \"field\":\"requestBody\",\n                                            \"value\":JSON.parse(event.target.value)\n                                        }\n                                        })\n                         }\n              >\n            </Form.Control>\n          </Form.Group>\n                            : ''\n          }\n          <h3> Parameters </h3>\n          <Form.Group className=\"service-leftbar-group\" >\n            {parameters.map((parameter_obj) =>\n                <>\n                <Form.Label>{parameter_obj[\"name\"]} ({parameter_obj[\"required\"] ? \"required\" : \"optional\"}) </Form.Label>\n                <Form.Control \n                    type=\"text\" \n                    defaultValue={node.workflow[parameter_obj[\"name\"]] ? node.workflow[parameter_obj[\"name\"]]  :\"Enter parameter value\"} \n                    placeholder=\"Enter parameter value\" \n                    onChange={(event)=> dispatch({\n                                            \"type\": ACTIONS.SELECT_FORM_VALUE,\n                                            \"payload\": {\n                                                \"field\":parameter_obj[\"name\"],\n                                                \"value\":event.target.value\n                                            }\n                                            })\n                             }\n                />\n                </>)}\n          </Form.Group>\n\n        </Form>\n         <Button \n            className=\"service-leftbar-button\"\n            variant=\"primary\" \n            type=\"submit\"\n            style={{\n                marginBottom: \"100px\"\n            }}\n            onClick={(e) => dispatch({\n                                \"type\":ACTIONS.UNSELECT_NODE, \n                                \"payload\":{\n                                    \"id\": node.id\n                                }\n                            })\n            }\n        >\n       Save Inputs \n        </Button>\n        </div>\n    )\n}\n\nexport default ServiceForm;\n","import { useState } from 'react';\nimport { Form, Button } from 'react-bootstrap';\nimport { AiFillCloseCircle } from \"react-icons/ai\";\nimport { ACTIONS } from '../App'\n\nfunction EdgeForm({ edge, \n                    operators,\n                    dispatch }){\n    return (<div\n            style={{\n                position: \"fixed\",\n                top: \"70px\",\n                left: \"0\",\n                height: \"100%\",\n                width: \"30%\",\n                zIndex: 999, \n                border: \"2px solid black\",\n                background: \"white\",\n                overflowY: \"auto\"\n            }}\n        >\n        <h3> { edge.data.type } </h3>\n        <Form>\n            <Form.Group className=\"service-leftbar-group\" \n                        controlId=\"exampleForm.ControlSelect1\">\n                <Form.Label>Select an Endpoint</Form.Label>\n            <Form.Control as=\"select\"\n                onChange={(event)=> dispatch({\n                                        \"type\": ACTIONS.UPDATE_EDGE_TYPE,\n                                        \"payload\": {\n                                            \"field\":\"type\",\n                                            \"value\":event.target.value\n                                        }\n                                        })\n                         }\n                >\n                {operators.map((path_name) => <option>{path_name}</option>)}\n            </Form.Control>\n          </Form.Group>\n        </Form>\n         <Button \n            className=\"service-leftbar-button\"\n            variant=\"primary\" \n            type=\"submit\"\n            style={{\n                marginBottom: \"100px\"\n            }}\n            onClick={(e) => dispatch({\n                                \"type\": ACTIONS.UNSELECT_EDGE,\n                                \"payload\":{\n                                    \"id\": edge.id\n                                }\n                            })\n            }\n        >\n       Save Inputs \n        </Button>\n        </div>\n    )\n}\n\nexport default EdgeForm;\n","import Navbar from 'react-bootstrap/Navbar'\nfunction TeangaNav() {\n  return (\n  <Navbar bg=\"dark\" \n          variant=\"dark\"\n          fixed=\"top\"\n          expand=\"lg\"\n          style={{\"height\": \"50px\"}}\n      >\n    <Navbar.Brand href=\"#home\">\n        <a class=\"navbar-brand\" style={{\"position\":\"fixed\",\"left\":\"5%\",\"marginTop\":\"-25px\"}} href=\"../platform\">\n            <img class=\"pull-left\" src=\"/static/images/teanga-logo-white.svg\" height=\"40\"/> &nbsp;\n            <span class=\"name\"><span class=\"beta\">MVP</span></span>\n        </a>\n    </Navbar.Brand>\n  </Navbar>)\n}\n\n\nexport default TeangaNav;\n\n","import React, { useReducer, useEffect } from 'react';\nimport ReactFlow , { addEdge, Controls, ControlButton } from 'react-flow-renderer';\nimport './App.css';\nimport ServiceNode from './components/ServiceNode';\nimport ServiceEdge from './components/ServiceEdge';\nimport SearchBar from './components/SearchBar';\nimport ServiceForm from './components/ServiceForm';\nimport EdgeForm from './components/EdgeForm';\nimport TeangaNav from './components/TeangaNav';\nimport { Button } from 'react-bootstrap'\nimport { AiFillCloseCircle } from \"react-icons/ai\";\nimport { parse as parseYAML, stringify } from 'yaml'\nimport axios from 'axios';\n\nconst nodeTypes = {\n  teangaNode: ServiceNode,\n};\n\nconst edgeTypes = {\n  teangaEdge: ServiceEdge,\n};\n\n\n\nconst initialState = {\n    node_count: 0,\n    input: \"\",\n    selected_nodeId: \"\",\n    selected_edgeId: \"\",\n    selectedPath: \"\",\n    selectedMethod: \"\",\n    methods: [],\n    paths: [],\n    requestBody: {},\n    services : [ \n                        {\n                            \"name\":\"dummy teanga\",\n                            \"url\":\"https://raw.githubusercontent.com/berstearns/personal/main/dummy.yaml\",\n                            \"repo\":\"berstearns\",\n                            \"image_id\":\"dummy_teanga_service\",\n                            \"image_tag\":\"042021\",\n                            \"host_port\":8001,\n                            \"container_port\":8080\n                        },\n                        {\n                            \"name\":\"dkpro\",\n                            \"url\": \"https://raw.githubusercontent.com/berstearns/personal/main/dkpro.yaml\",\n                            \"repo\":\"berstearns\",\n                            \"image_id\":\"teanga-dkpro-wrapper\",\n                            \"image_tag\":\"032021\",\n                            \"host_port\":8001,\n                            \"container_port\":8080\n                        },\n                        {\n                            \"name\":\"naisc\",\n                            \"url\":\"https://raw.githubusercontent.com/berstearns/personal/main/naisc.yaml\",\n                            \"repo\":\"berstearns\",\n                            \"image_id\":\"naisc\",\n                            \"image_tag\":\"latest\",\n                            \"host_port\":8001,\n                            \"container_port\":8080\n                        }\n                    ],\n    operators : [\"pass\",\"wait\",\"forEach\"],\n    elements: [\n    /*\n      {\n        id: '1',\n        type: 'special', // input node\n        data: { label: 'Input Node' },\n        position: { x: 250, y: 25 },\n      },\n       animated edge\n      { id: 'e1-2', source: '1', target: '2', animated: true, style:{background:\"red\"}},\n      { id: 'e2-3', source: '2', target: '3' }\n      */\n  ]\n}\n\nexport const ACTIONS = {\n    SET_OPENAPI: \"set-openapi\",\n    CREATE_WORKFLOW: \"create-workflow\",\n    UPDATE_INPUT : \"update-input\",\n    ADD_NODE: \"add-node\",\n    ADD_EDGE: \"add-edge\",\n    SELECT_NODE: \"select-node\",\n    UNSELECT_NODE: \"unselect-node\",\n    SELECT_EDGE: \"select-edge\",\n    REMOVE_SELECTED_NODE: \"remove-selected-node\",\n    SELECT_FORM_VALUE: \"select-form-value\",\n    UPDATE_EDGE_TYPE: \"update-edge-type\"\n}\n\nfunction reducer(state, action) {\n    switch(action.type){\n        case ACTIONS.SET_OPENAPI: \n            var new_state = {\n                ...state,\n                services: state.services.map((service, i) => {\n                    return {\n                        ...service,\n                        openapi: action.payload.openapi_yamls[i]\n                    }\n                })\n            }\n            return new_state \n        case ACTIONS.CREATE_WORKFLOW:\n           console.log(\"state services\",state.services)\n           var groupBy_node = {}\n           for(var element of state.elements){\n               if(element.type === \"teangaNode\"){\n                   if(!groupBy_node.hasOwnProperty(element.id)){\n                            groupBy_node[element.id] = {...element.workflow} \n                   }\n                   for(var candidate of state.elements){\n                        if(candidate.type===\"teangaEdge\" && candidate.target === element.id){\n                                groupBy_node[element.id][\"dependencies\"] = [...groupBy_node[element.id][\"dependencies\"]\n                                                                               , candidate]\n                        }\n                   }\n               }\n           }\n          for(var key of Object.keys(groupBy_node)){\n              for(var idx in groupBy_node[key][\"dependencies\"]){\n                  var dependecyEdge = groupBy_node[key][\"dependencies\"][idx] \n                  groupBy_node[key][\"dependencies\"][idx] = {\n                      \"operators\": dependecyEdge.data.type,\n                      \"steps\": [dependecyEdge.source],\n                  }\n              }\n          }\n           console.log(groupBy_node)\n           axios.post(\"/admin/ping\", groupBy_node)\n            .then(function(response){\n                window.resp =  response;\n            })\n            .catch(function(response){\n                alert(\"creation failed :(\");\n            })\n            return {\n                ...state\n            }\n\n        case ACTIONS.UPDATE_INPUT:\n            return {\n                ...state,\n                input: action.payload.input\n            }\n        case ACTIONS.ADD_NODE:\n            var selectedService = state.services\n                            .filter(\n                            (service) => service.name === action.payload.name\n                            )[0]\n            var openapi = selectedService[\"openapi\"]\n            console.log(selectedService)\n\n            var paths = Object.keys(openapi.paths)\n                                .map((path_name) => path_name)\n            var selectedPath = paths[0]\n            var methods = Object.keys(openapi.paths[selectedPath])\n            var selectedMethod = methods[0];\n            var parameters = openapi.paths[selectedPath][selectedMethod][\"parameters\"];\n            var requestBody = openapi.paths[selectedPath][selectedMethod][\"requestBody\"]; \n            var operation_id = openapi.paths[selectedPath][selectedMethod][\"operationId\"]; \n            var new_node = {\n                id: (state.node_count + 1).toString(),\n                type: 'teangaNode',\n                data: { \n                    label: action.payload.name, \n                    selected: false,\n                    openapi: openapi\n                },\n                workflow: {\n                    selectedPath: selectedPath, \n                    selectedMethod: selectedMethod,\n                    operation_id: operation_id,\n                    repo: selectedService[\"repo\"],\n                    image_id: selectedService[\"image_id\"],\n                    image_tag: selectedService[\"image_tag\"],\n                    host_port: selectedService[\"host_port\"],\n                    container_port: selectedService[\"container_port\"],\n                    input: {},\n                    dependencies: []\n                },\n                position: { x: 50, y: 50 },\n              }\n            var new_state = {\n                ...state,\n                node_count: state.node_count + 1,\n                elements: state.elements.concat(new_node)\n            }\n            return new_state \n\n        case ACTIONS.ADD_EDGE:\n            var [n1,n2,edge] = addEdge(\n                    action.payload.params,\n                    state.elements\n                )\n            console.log(edge)\n            var new_state = {\n                ...state,\n                elements: state.elements.concat(edge)\n            }\n            return new_state \n\n        case ACTIONS.SELECT_EDGE:\n            var new_state = {\n                ...state,\n                selected_edgeId: action.payload.id,\n                elements: state.elements.map((el) => {\n                    if(el.id === action.payload.id){\n                        return {\n                            ...el,\n                            data : {\n                                ...el.data,\n                                selected: !el.data.selected\n                            }\n                        }\n                    }\n                    else {\n                        return {\n                            ...el,\n                            data : {\n                                ...el.data,\n                                selected: false\n                            }\n                        }\n                    }\n                })\n            }\n            return new_state \n\n        case ACTIONS.UNSELECT_EDGE:\n            var new_state = {\n                ...state,\n                selected_edgeId: \"\", \n                elements: state.elements.map((el) => {\n                    if(el.id === action.payload.id){\n                        return {\n                            ...el,\n                            data : {\n                                ...el.data,\n                                selected: false\n                            }\n                        }\n                    }\n                    else {\n                        return {\n                            ...el,\n                            data : {\n                                ...el.data,\n                                selected: false\n                            }\n                        }\n                    }\n                })\n            }\n            return new_state \n\n\n        case ACTIONS.SELECT_NODE:\n            var selected_nodeId = state.selected_nodeId == action.payload.id ? '' : action.payload.id \n            if(selected_nodeId !== ''){\n                var node = state.elements.filter((node)=> node.id === selected_nodeId)[0]\n                var paths = Object.keys(node.data.openapi.paths)\n                                    .map((path_name) => path_name)\n                var selectedPath = node.workflow.selectedPath\n                var methods = Object.keys(node.data.openapi.paths[selectedPath])\n                var selectedMethod = node.workflow.selectedMethod\n                var parameters = node.data.openapi.paths[selectedPath][selectedMethod][\"parameters\"];\n                var requestBody = node.data.openapi.paths[selectedPath][selectedMethod][\"requestBody\"] ? node.data.openapi.paths[selectedPath][selectedMethod][\"requestBody\"] : ''  ; \n            }\n            else{\n                var paths= []\n                var selectedPath= \"\"\n                var methods= []\n                var selectedMethod= \"\"\n                var parameters = []\n                var requestBody = {}\n                \n            }\n            var new_state = {\n                ...state,\n                selected_nodeId: selected_nodeId ,\n                selectedPath: selectedPath,\n                methods: methods,\n                selectedMethod: selectedMethod,\n                paths: paths,\n                parameters: parameters,\n                requestBody: requestBody,\n                elements: state.elements.map((el) => {\n                    if(el.id === action.payload.id){\n                        return {\n                            ...el,\n                            data : {\n                                ...el.data,\n                                selected: !el.data.selected\n                            }\n                        }\n                    }\n                    else {\n                        return {\n                            ...el,\n                            data : {\n                                ...el.data,\n                                selected: false\n                            }\n                        }\n                    }\n                })\n            }\n            return new_state \n\n        case ACTIONS.UNSELECT_NODE:\n            var new_state = {\n                ...state,\n                selected_nodeId: \"\", \n                selectedPath: \"\",\n                selectedMethod: \"\",\n                methods: [],\n                paths: [],\n                elements: state.elements.map((el) => {\n                    if(el.id === action.payload.id){\n                        return {\n                            ...el,\n                            data : {\n                                ...el.data,\n                                selected: false\n                            }\n                        }\n                    }\n                    else {\n                        return {\n                            ...el,\n                            data : {\n                                ...el.data,\n                                selected: false\n                            }\n                        }\n                    }\n                })\n            }\n            return new_state \n\n        case ACTIONS.REMOVE_SELECTED_NODE:\n            var new_state = {\n                ...state,\n                selected_nodeId: '',\n                elements: state.elements.filter((el) => {\n                    if(el.id === action.payload.id){\n                        return false;\n                    }\n                    else if(el.source === action.payload.id || el.target === action.payload.id){\n                        return false\n                    }\n                    else{\n                        return true;\n                    }\n                })\n            }\n            return new_state\n        case ACTIONS.SELECT_FORM_VALUE:\n            var selected_nodeId = state.selected_nodeId \n            var new_node = state.elements.filter((node)=> node.id === selected_nodeId)[0]\n            var openapi = new_node.data.openapi\n            var paths = Object.keys(new_node.data.openapi.paths)\n                                .map((path_name) => path_name)\n            var selectedPath = action.payload.field == \"selectedPath\" ?\n                                                        action.payload.value :  \n                                                        state.selectedPath\n            var methods = Object.keys(new_node.data.openapi.paths[selectedPath])\n            if(action.payload.field == \"selectedMethod\"){\n                var selectedMethod = action.payload.value; }\n            else {\n                if(methods.indexOf(state.selectedMethod) !== -1)\n                { var selectedMethod = state.selectedMethod }\n                else{ var selectedMethod = methods[0] }\n            }\n            var parameters = openapi.paths[selectedPath][selectedMethod][\"parameters\"];\n\n            if([\"selectedPath\",\"selectedMethod\"].indexOf(action.payload.field) === -1)\n              { new_node.workflow[\"input\"][action.payload.field] =  action.payload.value; }\n            else\n              { \n                var operation_id = openapi.paths[selectedPath][selectedMethod][\"operationId\"]; \n                new_node.workflow = { ...new_node.workflow, \n                                      selectedPath: selectedPath,\n                                      selectedMethod: selectedMethod, \n                                      operation_id: operation_id\n                                    } \n              }\n            console.log(new_node)\n            var new_state = {\n                ...state,\n                elements: state.elements.map((node) =>{ \n                    if(node.id === selected_nodeId){ return new_node }\n                    else { return node }\n                }),\n                selectedPath: selectedPath,\n                methods: methods,\n                selectedMethod: selectedMethod,\n                parameters: parameters\n            }\n            return new_state\n        case ACTIONS.UPDATE_EDGE_TYPE:\n            var selected_nodeId = state.selected_nodeId \n            var new_node = state.elements.filter((node)=> node.id === selected_nodeId)[0]\n            var openapi = new_node.data.openapi\n            var paths = Object.keys(new_node.data.openapi.paths)\n                                .map((path_name) => path_name)\n            var selectedPath = action.payload.field == \"selectedPath\" ?\n                                                        action.payload.value :  \n                                                        state.selectedPath\n            var methods = Object.keys(new_node.data.openapi.paths[selectedPath])\n            if(action.payload.field == \"selectedMethod\"){\n                var selectedMethod = action.payload.value; }\n            else {\n                if(methods.indexOf(state.selectedMethod) !== -1)\n                { var selectedMethod = state.selectedMethod }\n                else{ var selectedMethod = methods[0] }\n            }\n            var parameters = openapi.paths[selectedPath][selectedMethod][\"parameters\"];\n\n            if([\"selectedPath\",\"selectedMethod\"].indexOf(action.payload.field) === -1)\n              { new_node.workflow[\"input\"][action.payload.field] =  action.payload.value; }\n            else\n              { \n                var operation_id = openapi.paths[selectedPath][selectedMethod][\"operationId\"]; \n                new_node.workflow = { ...new_node.workflow, \n                                      selectedPath: selectedPath,\n                                      selectedMethod: selectedMethod, \n                                      operation_id: operation_id\n                                    } \n              }\n            console.log(new_node)\n            var new_state = {\n                ...state,\n                elements: state.elements.map((node) =>{ \n                    if(node.id === selected_nodeId){ return new_node }\n                    else { return node }\n                }),\n                selectedPath: selectedPath,\n                methods: methods,\n                selectedMethod: selectedMethod,\n                parameters: parameters\n            }\n            return new_state\n        default:\n            return state\n    }\n}\n\nfunction App() {\n  const [state, dispatch] = useReducer(reducer, initialState) \n  useEffect(\n      async () => {\n        const promises = state.services.map( async (service) => { \n            const openapi = await fetch(service.url).then(response => \n                                                          response.text()) \n            const openapi_obj =  parseYAML(openapi)\n            return openapi_obj\n        })\n       const openapi_yamls = await Promise.all(promises)\n       dispatch({\n           \"type\": ACTIONS.SET_OPENAPI,\n           \"payload\":{\n               \"openapi_yamls\": openapi_yamls\n           }\n       })\n      },[])\n\n  const onConnect = (params) => dispatch({\n                                    'type':ACTIONS.ADD_EDGE,\n                                    'payload': {\n                                        \"params\": {\n                                            ...params,\n                                            \"type\": \"teangaEdge\",\n                                            \"data\": {\n                                                    \"type\":\"pass\"\n                                                    }\n                                                  }\n                                    }\n                                })\n  const onElementClick = (event, element) => {\n      if(element.source){\n          dispatch({ \"type\": ACTIONS.SELECT_EDGE,\n                     \"payload\": {\n                        \"id\": element.id\n                    }});\n      }\n      else if(element.id){\n          dispatch({ \"type\": ACTIONS.SELECT_NODE,\n                     \"payload\": {\n                        \"id\": element.id\n                    }});\n      }\n  }\n  return (\n      <>\n      <TeangaNav />\n      <div style={{\n          width: \"100%\"\n      }}>\n      <h3 style={{\"display\":\"inline-block\",\"margin-left\":\"5%\",\"margin-top\":\"5%\"}}> Build a workflow from the Flow Diagram </h3>\n            <Button variant=\"primary\"\n                    size=\"lg\"\n                    style={{\n                        maxWidth: \"90%\",\n                        fontSize: \"10px\",\n                        marginLeft: \"30%\"\n                    }} \n                    onClick={()=> {\n                        dispatch({\n                            \"type\": ACTIONS.CREATE_WORKFLOW,\n                            \"payload\": {\n                            }\n                        })\n                    }}\n        >Create Workflow</Button>\n      </div>\n      { state.selected_nodeId ? <ServiceForm \n                                    node={state.elements.filter((node)=> node.id === state.selected_nodeId)[0]}\n                                    dispatch={dispatch}\n                                    selectedPath={state.selectedPath}\n                                    paths={state.paths}\n                                    methods={state.methods} \n                                    selectedMethod={state.selectedMethod}\n                                    parameters={state.parameters}\n                                    requestBody={state.requestBody}\n          ></ServiceForm> \n                              : '' }\n      { state.selected_edgeId ? <EdgeForm \n                                    edge={state.elements.filter((node)=> node.id === state.selected_edgeId)[0]}\n                                    operators={state.operators}\n                                    dispatch={dispatch}\n          ></EdgeForm> \n                              : '' }\n      <div style={{\n          background: \"white\",\n          border: \"2px solid black\",\n          padding: \"5% 5% 5% 5%\",\n          width: \"90%\",\n          marginLeft: \"auto\",\n          marginRight: \"auto\",\n          marginTop: \"3%\"\n      }}>\n              <SearchBar services={state.services} \n                       dispatch={dispatch}\n                       input={state.input}\n              ></SearchBar>\n              <div id=\"chart_area\">\n\n                    <ReactFlow \n                        elements={state.elements} \n                        onConnect={onConnect}\n                        onElementClick={onElementClick}\n                        nodeTypes={nodeTypes}\n                        edgeTypes={edgeTypes}\n                        > \n                        <Controls style={{\n                            marginLeft:\"95%\" \n                        }}>\n                            <ControlButton onClick={() => dispatch({\n                                \"type\":ACTIONS.REMOVE_SELECTED_NODE,\n                                \"payload\": {\n                                    \"id\": state.selected_nodeId\n                                }\n                            })\n                            }>\n                              <AiFillCloseCircle/>\n                            </ControlButton>\n                        </Controls>\n                    </ReactFlow>\n              </div>\n      </div>\n      </>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n    <App />\n  ,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}